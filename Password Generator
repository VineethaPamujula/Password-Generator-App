/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Main.java to edit this template
 */
package passwordgeneratorapp;

import java.security.SecureRandom;
import java.util.Scanner;

public class PasswordGeneratorApp {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        while (true) {
            displayMenu();
            int choice = getUserChoice(scanner);

            switch (choice) {
                case 1:
                    generatePassword(scanner);
                    break;
                case 2:
                    checkPasswordStrength(scanner);
                    break;
                case 3:
                    displayPasswordSecurityInfo();
                    break;
                case 4:
                    System.out.println("Exiting the application. Goodbye!");
                    scanner.close();
                    return;
                default:
                    System.out.println("Invalid option. Please try again.");
            }
        }
    }

    private static void displayMenu() {
        System.out.println("\nPassword Generator Application");
        System.out.println("1. Generate Password");
        System.out.println("2. Check Password Strength");
        System.out.println("3. Display Password Security Information");
        System.out.println("4. Quit");
        System.out.print("Select an option: ");
    }

    private static int getUserChoice(Scanner scanner) {
        int choice = -1;
        while (choice == -1) {
            try {
                choice = Integer.parseInt(scanner.nextLine());
            } catch (NumberFormatException e) {
                System.out.println("Invalid input. Please enter a number.");
            }
        }
        return choice;
    }

    private static void generatePassword(Scanner scanner) {
        boolean useUppercase = getYesNoInput(scanner, "Include uppercase letters? (Yes/No): ");
        boolean useLowercase = getYesNoInput(scanner, "Include lowercase letters? (Yes/No): ");
        boolean useNumbers = getYesNoInput(scanner, "Include numbers? (Yes/No): ");
        boolean useSymbols = getYesNoInput(scanner, "Include symbols? (Yes/No): ");

        System.out.print("Enter the desired length of the password: ");
        int length = getUserInput(scanner, "Please enter a valid number for the password length: ");

        String password = PasswordGenerator.generatePassword(length, useUppercase, useLowercase, useNumbers, useSymbols);
        System.out.println("Generated Password: " + password);
    }

    private static void checkPasswordStrength(Scanner scanner) {
        System.out.print("Enter the password to check its strength: ");
        String password = scanner.nextLine();

        String strength = PasswordStrengthChecker.checkStrength(password);
        System.out.println("Password Strength: " + strength);
    }

    private static void displayPasswordSecurityInfo() {
        System.out.println("\nPassword Security Information:");
        System.out.println("- Avoid using the same password for multiple accounts.");
        System.out.println("- Avoid character repetition and keyboard patterns.");
        System.out.println("- Avoid dictionary words, letter or number sequences.");
        System.out.println("- Use a mix of uppercase, lowercase, numbers, and symbols.");
        System.out.println("- Ensure your password is at least 8 characters long.");
        System.out.println("- Consider using a password manager to keep track of your passwords.");
    }

    private static boolean getYesNoInput(Scanner scanner, String prompt) {
        String response;
        while (true) {
            System.out.print(prompt);
            response = scanner.nextLine().trim().toLowerCase();
            if (response.equals("yes") || response.equals("y")) {
                return true;
            } else if (response.equals("no") || response.equals("n")) {
                return false;
            } else {
                System.out.println("Invalid input. Please enter 'Yes' or 'No'.");
            }
        }
    }

    private static int getUserInput(Scanner scanner, String prompt) {
        int input = -1;
        while (input == -1) {
            try {
                input = Integer.parseInt(scanner.nextLine());
            } catch (NumberFormatException e) {
                System.out.println(prompt);
            }
        }
        return input;
    }
}

class PasswordGenerator {
    private static final String UPPERCASE = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
    private static final String LOWERCASE = "abcdefghijklmnopqrstuvwxyz";
    private static final String NUMBERS = "0123456789";
    private static final String SYMBOLS = "!@#$%^&*()-_=+[]{}|;:,.<>?";

    private static final SecureRandom random = new SecureRandom();

    public static String generatePassword(int length, boolean useUppercase, boolean useLowercase, boolean useNumbers, boolean useSymbols) {
        if (length <= 0) {
            throw new IllegalArgumentException("Password length must be greater than 0.");
        }

        StringBuilder passwordAlphabet = new StringBuilder();

        if (useUppercase) {
            passwordAlphabet.append(UPPERCASE);
        }
        if (useLowercase) {
            passwordAlphabet.append(LOWERCASE);
        }
        if (useNumbers) {
            passwordAlphabet.append(NUMBERS);
        }
        if (useSymbols) {
            passwordAlphabet.append(SYMBOLS);
        }

        if (passwordAlphabet.length() == 0) {
            throw new IllegalArgumentException("At least one character set must be selected.");
        }

        StringBuilder password = new StringBuilder(length);
        for (int i = 0; i < length; i++) {
            int index = random.nextInt(passwordAlphabet.length());
            password.append(passwordAlphabet.charAt(index));
        }

        return password.toString();
    }
}

class PasswordStrengthChecker {
    public static String checkStrength(String password) {
        int score = 0;

        if (password.length() >= 8) score++;
        if (password.length() >= 16) score++;
        if (password.matches(".*[A-Z].*")) score++;
        if (password.matches(".*[a-z].*")) score++;
        if (password.matches(".*\\d.*")) score++;
        if (password.matches(".*[!@#$%^&*()-_=+\\[\\]{}|;:,.<>?].*")) score++;

        switch (score) {
            case 6: return "Great";
            case 5: return "Good";
            case 3:
            case 4: return "Medium";
            default: return "Weak";
        }
    }
}
